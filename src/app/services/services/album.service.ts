/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { AlbumResponse } from '../models/album-response';
import { findAlbumById } from '../fn/album/find-album-by-id';
import { FindAlbumById$Params } from '../fn/album/find-album-by-id';
import { findAllAlbums } from '../fn/album/find-all-albums';
import { FindAllAlbums$Params } from '../fn/album/find-all-albums';
import { PageResponseAlbumResponse } from '../models/page-response-album-response';
import { saveAlbum } from '../fn/album/save-album';
import { SaveAlbum$Params } from '../fn/album/save-album';
import { uploadAlbumCoverPicture } from '../fn/album/upload-album-cover-picture';
import { UploadAlbumCoverPicture$Params } from '../fn/album/upload-album-cover-picture';

@Injectable({ providedIn: 'root' })
export class AlbumService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `findAllAlbums()` */
  static readonly FindAllAlbumsPath = '/albums';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findAllAlbums()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAllAlbums$Response(params?: FindAllAlbums$Params, context?: HttpContext): Observable<StrictHttpResponse<PageResponseAlbumResponse>> {
    return findAllAlbums(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findAllAlbums$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAllAlbums(params?: FindAllAlbums$Params, context?: HttpContext): Observable<PageResponseAlbumResponse> {
    return this.findAllAlbums$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageResponseAlbumResponse>): PageResponseAlbumResponse => r.body)
    );
  }

  /** Path part for operation `saveAlbum()` */
  static readonly SaveAlbumPath = '/albums';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `saveAlbum()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  saveAlbum$Response(params: SaveAlbum$Params, context?: HttpContext): Observable<StrictHttpResponse<number>> {
    return saveAlbum(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `saveAlbum$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  saveAlbum(params: SaveAlbum$Params, context?: HttpContext): Observable<number> {
    return this.saveAlbum$Response(params, context).pipe(
      map((r: StrictHttpResponse<number>): number => r.body)
    );
  }

  /** Path part for operation `uploadAlbumCoverPicture()` */
  static readonly UploadAlbumCoverPicturePath = '/albums/cover/{album-id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `uploadAlbumCoverPicture()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  uploadAlbumCoverPicture$Response(params: UploadAlbumCoverPicture$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return uploadAlbumCoverPicture(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `uploadAlbumCoverPicture$Response()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  uploadAlbumCoverPicture(params: UploadAlbumCoverPicture$Params, context?: HttpContext): Observable<{
}> {
    return this.uploadAlbumCoverPicture$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

  /** Path part for operation `findAlbumById()` */
  static readonly FindAlbumByIdPath = '/albums/{album-id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findAlbumById()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAlbumById$Response(params: FindAlbumById$Params, context?: HttpContext): Observable<StrictHttpResponse<AlbumResponse>> {
    return findAlbumById(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findAlbumById$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAlbumById(params: FindAlbumById$Params, context?: HttpContext): Observable<AlbumResponse> {
    return this.findAlbumById$Response(params, context).pipe(
      map((r: StrictHttpResponse<AlbumResponse>): AlbumResponse => r.body)
    );
  }

}
